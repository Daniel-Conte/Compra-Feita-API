// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pessoa {
  codigo       Int           @id @default(autoincrement())
  nome         String        @db.VarChar(50)
  email        String        @unique @db.VarChar(50)
  senha        String        @db.Text
  telefone     String        @db.VarChar(14)
  admin        Int           @default(0)
  pushToken    String?       @db.Text
  criadoEm     DateTime      @default(now())
  atualizadoEm DateTime      @updatedAt
  enderecos    Endereco[]
  pedidos      Pedido[]
  itensPedido  ItensPedido[]
}

model Endereco {
  codigo       Int      @id @default(autoincrement())
  nome         String   @db.VarChar(50)
  cep          String   @db.VarChar(8)
  cidade       String   @db.VarChar(50)
  uf           String   @db.VarChar(2)
  bairro       String   @db.VarChar(50)
  rua          String   @db.VarChar(50)
  numero       String   @db.VarChar(8)
  complemento  String?  @db.VarChar(50)
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
  codigoPessoa Int
  pessoa       Pessoa   @relation(fields: [codigoPessoa], references: [codigo])
  pedidos      Pedido[]
}

model Pedido {
  codigo                    Int           @id @default(autoincrement())
  metodoPagamento           Int
  pagamentoDinheiro         Float?
  data                      DateTime      @default(now())
  status                    Int           @default(0)
  justificativaCancelamento String?       @db.VarChar(200)
  atualizadoEm              DateTime      @updatedAt
  pessoaCodigo              Int
  enderecoCodigo            Int
  pessoa                    Pessoa        @relation(fields: [pessoaCodigo], references: [codigo])
  endereco                  Endereco      @relation(fields: [enderecoCodigo], references: [codigo])
  itensPedido               ItensPedido[]
}

model ItensPedido {
  codigo        Int      @id @default(autoincrement())
  quantidade    Int
  nomeProduto   String   @db.VarChar(50)
  precoUnitario Float
  criadoEm      DateTime @default(now())
  atualizadoEm  DateTime @updatedAt
  codigoProduto Int
  codigoPessoa  Int
  codigoPedido  Int?
  produto       Produto  @relation(fields: [codigoProduto], references: [codigo])
  pessoa        Pessoa   @relation(fields: [codigoPessoa], references: [codigo])
  pedido        Pedido?  @relation(fields: [codigoPedido], references: [codigo])
}

model Produto {
  codigo          Int             @id @default(autoincrement())
  nome            String          @unique @db.VarChar(50)
  descricao       String          @db.Text
  precoUnitario   Float
  estoque         Int
  altura          Float?
  comprimento     Float?
  largura         Float?
  marca           String?         @db.VarChar(50)
  modelo          String?         @db.VarChar(50)
  criadoEm        DateTime        @default(now())
  atualizadoEm    DateTime        @updatedAt
  codigoCategoria Int
  categoria       Categoria       @relation(fields: [codigoCategoria], references: [codigo])
  imagens         ImagemProduto[]
  itensPedido     ItensPedido[]
}

model Categoria {
  codigo             Int         @id @default(autoincrement())
  nome               String      @unique @db.VarChar(50)
  descricao          String?     @db.VarChar(200)
  criadoEm           DateTime    @default(now())
  atualizadoEm       DateTime    @updatedAt
  codigoCategoriaPai Int?
  categoriaPai       Categoria?  @relation("CategoriaPai", fields: [codigoCategoriaPai], references: [codigo])
  subCategorias      Categoria[] @relation("CategoriaPai")
  produtos           Produto[]
}

model ImagemProduto {
  codigo        Int      @id @default(autoincrement())
  imagem        String
  criadoEm      DateTime @default(now())
  atualizadoEm  DateTime @updatedAt
  codigoProduto Int
  produto       Produto  @relation(fields: [codigoProduto], references: [codigo], onDelete: Cascade)
}
